{"ast":null,"code":"import { map } from \"rxjs/operators\";\nimport { environment } from \"src/environments/environment\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let ApiService = /*#__PURE__*/(() => {\n  class ApiService {\n    constructor(http) {\n      this.http = http;\n    }\n\n    getDetailRecipes(id) {\n      try {\n        return this.http.get(`${environment.url}recipes/${id}/information?apiKey=${environment.apiKey}`).pipe(map(request => {\n          return request;\n        }));\n      } catch (error) {\n        console.error(error);\n      }\n    }\n\n    getMenuItems(item) {\n      try {\n        return this.http.get(`${environment.url}/food/menuItems/search?apiKey=${environment.apiKey}&query=${item}&number=5`).pipe(map(request => {\n          return request;\n        }));\n      } catch (error) {\n        console.error(error);\n      }\n    }\n\n    getRandomRecipes() {\n      try {\n        return this.http.get(`${environment.url}recipes/random?apiKey=${environment.apiKey}&number=5`).pipe(map(request => {\n          return request;\n        }));\n      } catch (error) {\n        console.error(error);\n      }\n    }\n\n    getAllRecipes() {\n      try {\n        return this.http.get(`${environment.url}recipes/complexSearch?apiKey=${environment.apiKey}&number=10`).pipe(map(request => {\n          return request;\n        }));\n      } catch (error) {\n        console.error(error);\n      }\n    }\n\n    getAllSearchRecipes(data) {\n      try {\n        return this.http.get(`${environment.url}recipes/complexSearch?query=${data}&apiKey=${environment.apiKey}&number=10`).pipe(map(request => {\n          return request;\n        }));\n      } catch (error) {\n        console.error(error);\n      }\n    }\n\n    getAllsRecipes() {\n      try {\n        return this.http.get(`${environment.url}recipes/complexSearch?apiKey=&number=50`).pipe(map(request => {\n          return request;\n        }));\n      } catch (error) {\n        console.error(error);\n      }\n    }\n\n  }\n\n  ApiService.ɵfac = function ApiService_Factory(t) {\n    return new (t || ApiService)(i0.ɵɵinject(i1.HttpClient));\n  };\n\n  ApiService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ApiService,\n    factory: ApiService.ɵfac,\n    providedIn: \"root\"\n  });\n  return ApiService;\n})();","map":null,"metadata":{},"sourceType":"module"}